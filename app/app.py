import streamlit as st
from typing import List

# –ù–æ–≤—ã–π —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –≥—Ä—É–ø–ø
FUNCTIONAL_GROUPS = [
    "NO2", "SO3H", "CN", "PO4", "F", "Cl", "Br", "I", "OH", "NH2", "COOH", "CH3", 
    "SH", "NH", "CO", "C=O", "CH2", "CF3", "SiH3", "C‚â°N", "C=C", "OCH3", "COOCH3"
]

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
def compute_match(target: List[str], candidate: List[str]):
    return sum(1 for group in candidate if group in target)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="–õ–∏–≥–∞–Ω–¥ –ü–æ–¥–±–æ—Ä—â–∏–∫",
    page_icon="üî¨",
    layout="wide"
)

# –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
st.title("üß¨ –°–∏—Å—Ç–µ–º–∞ –ø–æ–∏—Å–∫–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º—ã—Ö –ª–∏–≥–∞–Ω–¥–æ–≤")

# –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞
st.write("""
–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –ø–æ–º–æ–≥–∞–µ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—å –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –≥—Ä—É–ø–ø—ã –¥–ª—è –ø–æ–¥–±–æ—Ä–∞ –ª–∏–≥–∞–Ω–¥–æ–≤ –∫ –º–æ–ª–µ–∫—É–ª–µ. 
–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ—Ç–æ–¥–∏–∫—É —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –≥—Ä—É–ø–ø –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–∞–∏–±–æ–ª–µ–µ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ–≥–æ –ª–∏–≥–∞–Ω–¥–∞.
""")

# –ö–æ–ª–æ–Ω–∫–∏ –¥–ª—è –ª—É—á—à–µ–≥–æ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
col1, col2 = st.columns(2)

# –í–≤–æ–¥ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –≥—Ä—É–ø–ø –¥–ª—è –º–æ–ª–µ–∫—É–ª—ã (–∑–∞–º–æ–∫)
with col1:
    st.header("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–ª–µ–∫—É–ª—ã")
    lock = st.multiselect("–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –≥—Ä—É–ø–ø—ã –º–æ–ª–µ–∫—É–ª—ã (–∑–∞–º–æ–∫)", options=FUNCTIONAL_GROUPS, default=["OH", "NH2"])

# –í–≤–æ–¥ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –ª–∏–≥–∞–Ω–¥–æ–≤
with col2:
    st.header("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–∏–≥–∞–Ω–¥–æ–≤")
    num_keys = st.slider("–°–∫–æ–ª—å–∫–æ –ª–∏–≥–∞–Ω–¥–æ–≤ –Ω—É–∂–Ω–æ —Å—Ä–∞–≤–Ω–∏—Ç—å?", min_value=1, max_value=5, value=3)
    group_size = st.slider("–°–∫–æ–ª—å–∫–æ –≥—Ä—É–ø–ø —É –∫–∞–∂–¥–æ–≥–æ –ª–∏–≥–∞–Ω–¥–∞?", min_value=1, max_value=len(FUNCTIONAL_GROUPS), value=2)

# –í–≤–æ–¥ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –≥—Ä—É–ø–ø –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ª–∏–≥–∞–Ω–¥–∞ –≤ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–≤–∞–µ–º—ã—Ö –ø–æ–ª—è—Ö
st.write(f"### –£–∫–∞–∂–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –≥—Ä—É–ø–ø—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–∑ {num_keys} –ª–∏–≥–∞–Ω–¥–æ–≤:")
key_groups = []
for i in range(num_keys):
    key_group = st.multiselect(f"–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –≥—Ä—É–ø–ø—ã –¥–ª—è –ª–∏–≥–∞–Ω–¥–∞ {i + 1}", FUNCTIONAL_GROUPS, key=f"key_group_{i}", max_selections=group_size)
    key_groups.append(key_group)

# –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –∏ –≤—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
if st.button("–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –ª–∏–≥–∞–Ω–¥"):
    best_match = -1
    best_ligand = None

    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ª—É—á—à–∏–π –ª–∏–≥–∞–Ω–¥
    for i, key in enumerate(key_groups):
        score = compute_match(lock, key)
        if score > best_match:
            best_match = score
            best_ligand = key

    # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    if best_ligand:
        st.success(f"üîë –ù–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –ª–∏–≥–∞–Ω–¥: **{', '.join(best_ligand)}** —Å —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ–º: **{best_match}**")
    else:
        st.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –ª–∏–≥–∞–Ω–¥.")

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ—Ç–∞–ª–∏ –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
st.write("---")
st.write("### –ü–æ–ª–µ–∑–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
st.info("–í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–¥–±–æ—Ä–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –≥—Ä—É–ø–ø –∫ —Ä–∞–∑–Ω—ã–º —Ç–∏–ø–∞–º –º–æ–ª–µ–∫—É–ª. –°—Ä–∞–≤–Ω–∏—Ç–µ —Ä–∞–∑–ª–∏—á–Ω—ã–µ –ª–∏–≥–∞–Ω–¥–Ω—ã–µ –Ω–∞–±–æ—Ä—ã –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã.")
